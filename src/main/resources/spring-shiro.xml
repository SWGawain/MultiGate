<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:lang="http://www.springframework.org/schema/lang"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang.xsd"
       default-autowire="byName" default-lazy-init="false">


    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/login.jsp"/>
        <property name="successUrl" value="/index.jsp"/>
        <!-- override these for application-specific URLs if you like:
        <property name="unauthorizedUrl" value="/unauthorized.jsp"/> -->
        <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean  -->
        <!-- defined will be automatically acquired and available via its beanName in chain        -->
        <!-- definitions, but you can perform instance overrides or name aliases here if you like: -->
        <!-- <property name="filters">
            <util:map>
                <entry key="anAlias" value-ref="someFilter"/>
            </util:map>
        </property> -->
        <property name="filterChainDefinitions">
            <value>
                / = anon
                /res/** = noSessionCreation
                /index/** = anon
                /index.jsp = anon
                /admin/** = authc, roles[admin]
                /redis/** = authc, roles[redis], roles[admin]
                /trade/** = authc, roles[trade], roles[admin]
                /docs/** = authc, perms[document:read]
                /logout = logout
                /** = authc
            </value>
        </property>
    </bean>


    <!--Filter Name	Class
    anon	org.apache.shiro.web.filter.authc.AnonymousFilter
    authc	org.apache.shiro.web.filter.authc.FormAuthenticationFilter
    authcBasic	org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter
    logout	org.apache.shiro.web.filter.authc.LogoutFilter
    noSessionCreation	org.apache.shiro.web.filter.session.NoSessionCreationFilter
    perms	org.apache.shiro.web.filter.authz.PermissionsAuthorizationFilter
    port	org.apache.shiro.web.filter.authz.PortFilter
    rest	org.apache.shiro.web.filter.authz.HttpMethodPermissionFilter
    roles	org.apache.shiro.web.filter.authz.RolesAuthorizationFilter
    ssl	org.apache.shiro.web.filter.authz.SslFilter
    user	org.apache.shiro.web.filter.authc.UserFilter-->

    <!-- Define any javax.servlet.Filter beans you want anywhere in this application context.   -->
    <!-- They will automatically be acquired by the 'shiroFilter' bean above and made available -->
    <!-- to the 'filterChainDefinitions' property.  Or you can manually/explicitly add them     -->
    <!-- to the shiroFilter's 'filters' Map if desired. See its JavaDoc for more details.       -->
    <!--<bean id="someFilter" class="..."/>
    <bean id="anotherFilter" class="..."> ... </bean>
    ...-->

    <bean class="org.apache.shiro.cache.MemoryConstrainedCacheManager" id="mccacheManager"/>

    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!-- Single realm app.  If you have multiple realms, use the 'realms' property instead. -->
        <property name="realm" ref="stormpathRealm"/>
        <!-- By default the servlet container sessions will be used.  Uncomment this line
             to use shiro's native sessions (see the JavaDoc for more): -->
        <!-- <property name="sessionMode" value="native"/> -->
        <property name="cacheManager" ref="mccacheManager"/>
    </bean>

    <bean class="com.stormpath.shiro.client.ClientFactory" id="clientFactory">
        <property name="cacheManager" ref="mccacheManager"/>
        <!--<property name="apiKeyFileLocation" value="C:\\Users\\嘉玮\\.stormpath\\apiKey.properties"/>-->
        <property name="apiKeyFileLocation" value="C:\\Users\\嘉玮\\.stormpath\\apiKey.properties"/>
    </bean>

    <bean class="com.stormpath.sdk.client.Client" id="client" factory-bean="clientFactory" factory-method="createInstance"/>

    <bean class="com.stormpath.shiro.realm.DefaultGroupRoleResolver" id="defaultGroupRoleResolver">
        <property name="modeNames" value="name"/>
    </bean>
    <bean class="com.stormpath.shiro.realm.ApplicationRealm" id="stormpathRealm">
        <property name="client" ref="client"/>
        <property name="applicationRestUrl" value="https://api.stormpath.com/v1/applications/6lB7UWso3WSata451WopP4"/>
        <property name="groupRoleResolver" ref="defaultGroupRoleResolver"/>
    </bean>

    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- Define the Shiro Realm implementation you want to use to connect to your back-end -->
    <!-- security datasource: -->
</beans>